@page "/"
@page "/{groupId}"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IAsyncDisposable
<!--HTML-->
<h3>OnlineRoom</h3>
<label>INFO: "@errorLabel"</label>
<div class="form-group">

    @if (string.IsNullOrWhiteSpace(groupId))
    {
        <input id="UsernameInput" @bind="player.Username" placeholder="Username" />
        <label>Create or join a room.</label>
        <button @onclick="CreateRoom"> Create</button>
        <label>Join</label>
        <input id="groupPut" @bind="groupInput" placeholder="GroupID" />
        <button @onclick="JoinRoom">Join room</button>
    }
    else
    {
        <label>You are in room: "@groupId"</label>
    }
</div>

<div class="form-group">
    <button @onclick="RandomOperatorAndSend"> Random Operator</button>
</div>
<button disabled="@(!IsConnected)">Send</button>

<div style="border: solid">
    @foreach (var player in players)
    {
    <div class="row">
        <img class="" src="Images/@(player.CurrentOperator).webp" style="width: 100px"/>
        <p class="col">@player.Username: @player.CurrentOperator</p>

    </div>
    }
</div>

<!-- CODE -->
@code {
    private HubConnection hubConnection;
    //private List<string> messages = new List<string>();
    private string groupInput = ""; //This binds with input
    [Parameter]
    public string groupId { get; set; } //this is where the group gets stored.
    private string errorLabel = "";
    private bool groupJoined = false;
    private Player player = new Player();
    private List<Player> players = new List<Player>();

    protected override async Task OnInitializedAsync()
    {
        //Maybe set to communicationhub
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/onlineroom"))
            .Build();

        hubConnection.On<Player>("GetPlayer", player =>
        {
            errorLabel = "Spiller tilføjet";

        //Find if user exists already, if exists then replace with new player object
        int index = players.FindIndex(p => p.Username == player.Username);
            if (index != -1)
            {
                players[index] = player;
            }
            else
            {
                players.Add(player);
            }
            StateHasChanged();
        });

        await hubConnection.StartAsync();

        //If group parameter is set, then join group
        if (!string.IsNullOrWhiteSpace(groupId) && groupJoined != true)
        {
            //set this or it will be overwritten in joinroom
            groupInput = groupId;
            await JoinRoom();
        }
    }


    async Task CreateRoom()
    {
        Random rnd = new Random();
        string group = "";
        for (int i = 0; i < 7; i++)
        {
            group += rnd.Next(1, 9);
        }
        groupId = group;
        await hubConnection.SendAsync("JoinRoom", group);
    }

    async Task JoinRoom()
    {
        errorLabel = "Rum tilsluttet";
        groupId = groupInput;
        groupJoined = true;
        await hubConnection.SendAsync("JoinRoom", groupId);
    }

    async Task SendAPlayer() =>
    await hubConnection.SendAsync("SendPlayer", player, groupId);

    public async void RandomOperatorAndSend()
    {
        player.GetRandomOperator();
        await SendAPlayer();
    }

    public bool IsConnected =>
    hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }
}
